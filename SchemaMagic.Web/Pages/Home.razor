@page "/"
@using SchemaMagic.Web.Services
@using System.Security.Cryptography
@using System.Text
@inject GitHubService GitHubService
@inject SchemaAnalysisService SchemaAnalysisService
@inject IJSRuntime JSRuntime

<PageTitle>SchemaMagic - Interactive EF Core Schema Visualizer</PageTitle>

<!-- Hero Section with Integrated Analyzer -->
<section class="hero-section py-5">
    <div class="container py-5">
        <div class="row g-5">
            <div class="col-12 text-center">
                <div class="d-flex align-items-center justify-content-center mb-4 hero-logo-text">
                    <img src="images/SchemaMagic Logo.svg" alt="SchemaMagic Logo" class="hero-logo me-4" />
                    <h1 class="display-3 fw-bold mb-0 text-white hero-title">
                        SchemaMagic
                    </h1>
                </div>
                <p class="lead text-white mb-4">
                    Interactive Entity Framework Core Schema Visualizer
                </p>
                <p class="text-white-50 mb-5">
                    Enter a GitHub repository URL below to discover DbContext files and generate beautiful, 
                    interactive schema diagrams directly in your browser.
                </p>
            </div>
        </div>

        <!-- Integrated Analyzer Form -->
        <div class="row justify-content-center">
            <div class="col-lg-10">
                <div class="card shadow-lg border-0">
                    <div class="card-body p-4">
                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                                <strong><i class="bi bi-exclamation-triangle"></i> Error:</strong> @errorMessage
                                <button type="button" class="btn-close" @onclick="@(() => errorMessage = "")"></button>
                            </div>
                        }

                        <div class="mb-4">
                            <label for="repoUrl" class="form-label fw-bold">
                                <i class="bi bi-github"></i> GitHub Repository URL
                            </label>
                            <div class="input-group input-group-lg">
                                <input type="url"
                                       class="form-control"
                                       id="repoUrl"
                                       @bind="repositoryUrl"
                                       @bind:event="oninput"
                                       placeholder="https://github.com/owner/repository"
                                       disabled="@isLoading" />
                                <button class="btn btn-primary"
                                        type="button"
                                        @onclick="DiscoverDbContextsAsync"
                                        disabled="@(isLoading || string.IsNullOrWhiteSpace(repositoryUrl))">
                                    @if (isLoading)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                        <span>Discovering...</span>
                                    }
                                    else
                                    {
                                        <i class="bi bi-search me-2"></i>
                                        <span>Discover</span>
                                    }
                                </button>
                            </div>
                            <div class="form-text d-flex justify-content-between align-items-center">
                                <span>
                                    <i class="bi bi-info-circle"></i> Example: https://github.com/panoramicdata/SchemaMagic
                                </span>
                                <button class="btn btn-sm btn-outline-light"
                                        type="button"
                                        @onclick="LoadDemoRepository"
                                        disabled="@isLoading">
                                    <i class="bi bi-play-circle me-1"></i>
                                    Try Demo with This Project
                                </button>
                            </div>
                        </div>

                        <!-- Optional Token Section - Collapsible -->
                        <div class="mb-3">
                            <details>
                                <summary class="text-muted" style="cursor: pointer;">
                                    <i class="bi bi-lock"></i> <small>Private Repository? Click to add Personal Access Token</small>
                                </summary>
                                <div class="mt-3">
                                    <label for="accessToken" class="form-label">
                                        <i class="bi bi-shield-check"></i> Personal Access Token
                                    </label>
                                    <div class="input-group">
                                        <input type="password"
                                               class="form-control"
                                               id="accessToken"
                                               @bind="accessToken"
                                               placeholder="ghp_xxxxxxxxxxxxxxxxxxxx"
                                               disabled="@isLoading" />
                                        <button class="btn btn-outline-secondary"
                                                type="button"
                                                @onclick="ValidateTokenAsync"
                                                disabled="@(isValidatingToken || string.IsNullOrWhiteSpace(accessToken))">
                                            @if (isValidatingToken)
                                            {
                                                <span class="spinner-border spinner-border-sm" role="status"></span>
                                            }
                                            else
                                            {
                                                <i class="bi bi-shield-check"></i>
                                            }
                                        </button>
                                    </div>
                                    <div class="form-text">
                                        <small>
                                            <i class="bi bi-info-circle"></i>
                                            Create a <a href="https://github.com/settings/personal-access-tokens/new" target="_blank" rel="noopener">
                                                Personal Access Token
                                            </a> with 'Contents' read permission.
                                            @if (tokenValidationResult.HasValue)
                                            {
                                                @if (tokenValidationResult.Value)
                                                {
                                                    <span class="text-success ms-2">
                                                        <i class="bi bi-check-circle-fill"></i> Token is valid
                                                    </span>
                                                }
                                                else
                                                {
                                                    <span class="text-danger ms-2">
                                                        <i class="bi bi-x-circle-fill"></i> Token is invalid
                                                    </span>
                                                }
                                            }
                                        </small>
                                    </div>
                                </div>
                            </details>
                        </div>

                        @if (dbContextFiles.Any())
                        {
                            <div class="alert alert-success d-flex align-items-center" role="alert">
                                <i class="bi bi-check-circle-fill me-2 fs-4"></i>
                                <div>
                                    <strong>Found @dbContextFiles.Count DbContext file@(dbContextFiles.Count != 1 ? "s" : "")!</strong>
                                    <ul class="mb-0 mt-2">
                                        @foreach (var file in dbContextFiles)
                                        {
                                            <li><code>@file.FilePath</code></li>
                                        }
                                    </ul>
                                </div>
                            </div>

                            @if (dbContextFiles.Count > 1)
                            {
                                <div class="mb-3">
                                    <label for="dbContextSelect" class="form-label fw-bold">
                                        <i class="bi bi-file-code"></i> Select DbContext to Analyze
                                    </label>
                                    <select class="form-select form-select-lg"
                                            id="dbContextSelect"
                                            @bind="selectedDbContextPath"
                                            disabled="@isAnalyzing">
                                        <option value="">Choose a DbContext file...</option>
                                        @foreach (var file in dbContextFiles)
                                        {
                                            <option value="@file.FilePath">@file.FileName - @file.FilePath</option>
                                        }
                                    </select>
                                </div>

                                <div class="d-grid gap-2">
                                    <button class="btn btn-success btn-lg"
                                            type="button"
                                            @onclick="AnalyzeSchemaAsync"
                                            disabled="@(isAnalyzing || string.IsNullOrEmpty(selectedDbContextPath))">
                                        @if (isAnalyzing)
                                        {
                                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                            <span>Analyzing Schema...</span>
                                        }
                                        else
                                        {
                                            <i class="bi bi-diagram-3 me-2"></i>
                                            <span>Generate Interactive Schema</span>
                                        }
                                    </button>
                                </div>
                            }
                            else
                            {
                                <!-- Single DbContext - show analyzing state -->
                                @if (isAnalyzing)
                                {
                                    <div class="text-center py-4">
                                        <div class="spinner-border text-primary mb-3" role="status" style="width: 3rem; height: 3rem;">
                                            <span class="visually-hidden">Analyzing...</span>
                                        </div>
                                        <h5 class="text-muted">
                                            <i class="bi bi-diagram-3 me-2"></i>Analyzing Schema...
                                        </h5>
                                        <p class="text-muted">Parsing <code>@dbContextFiles[0].FileName</code></p>
                                    </div>
                                }
                            }
                        }

                        @if (analysisResult != null && analysisResult.Success)
                        {
                            <div class="mt-4 p-4 bg-success bg-opacity-10 border border-success rounded">
                                <h5 class="text-success mb-3">
                                    <i class="bi bi-check-circle-fill"></i> Schema Generated Successfully!
                                </h5>
                                <p class="mb-3">
                                    <strong>@analysisResult.EntitiesFound entities</strong> found in your database schema.
                                </p>
                                <div class="d-grid gap-2">
                                    <button class="btn btn-primary btn-lg"
                                            @onclick="ViewSchemaAsync">
                                        <i class="bi bi-eye me-2"></i> View Interactive Schema
                                    </button>
                                    <button class="btn btn-outline-secondary"
                                            @onclick="DownloadSchemaAsync">
                                        <i class="bi bi-download me-2"></i> Download HTML File
                                    </button>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Project Links Section -->
<section class="py-5 bg-light">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-lg-10">
                <div class="text-center mb-4">
                    <h3 class="fw-bold mb-3">
                        <i class="bi bi-download"></i> Also Available as a .NET Tool
                    </h3>
                    <p class="text-muted">
                        Use SchemaMagic directly from your command line or integrate it into your development workflow
                    </p>
                </div>
                <div class="row g-4">
                    <div class="col-md-6">
                        <div class="card h-100 shadow-sm project-link-card">
                            <div class="card-body text-center p-4">
                                <div class="mb-3">
                                    <svg height="64" viewBox="0 0 16 16" width="64" aria-hidden="true">
                                        <path fill="currentColor" d="M8 0c4.42 0 8 3.58 8 8a8.013 8.013 0 0 1-5.45 7.59c-.4.08-.55-.17-.55-.38 0-.27.01-1.13.01-2.2 0-.75-.25-1.23-.54-1.48 1.78-.2 3.65-.88 3.65-3.95 0-.88-.31-1.59-.82-2.15.08-.2.36-1.02-.08-2.12 0 0-.67-.22-2.2.82-.64-.18-1.32-.27-2-.27-.68 0-1.36.09-2 .27-1.53-1.03-2.2-.82-2.2-.82-.44 1.1-.16 1.92-.08 2.12-.51.56-.82 1.28-.82 2.15 0 3.06 1.86 3.75 3.64 3.95-.23.2-.44.55-.51 1.07-.46.21-1.61.55-2.33-.66-.15-.24-.6-.83-1.23-.82-.67.01-.27.38.01.53.34.19.73.9.82 1.13.16.45.68 1.31 2.69.94 0 .67.01 1.3.01 1.49 0 .21-.15.45-.55.38A7.995 7.995 0 0 1 0 8c0-4.42 3.58-8 8-8Z"></path>
                                    </svg>
                                </div>
                                <h5 class="card-title fw-bold mb-3">GitHub Repository</h5>
                                <p class="card-text text-muted mb-4">
                                    View source code, report issues, and contribute to the project
                                </p>
                                <a href="https://github.com/panoramicdata/SchemaMagic" 
                                   target="_blank" 
                                   rel="noopener noreferrer"
                                   class="btn btn-dark btn-lg w-100">
                                    <i class="bi bi-github me-2"></i>
                                    View on GitHub
                                </a>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="card h-100 shadow-sm project-link-card">
                            <div class="card-body text-center p-4">
                                <div class="mb-3">
                                    <svg height="64" viewBox="0 0 24 24" width="64" aria-hidden="true">
                                        <path fill="#004880" d="M12 2.5C6.2 2.5 1.5 7.2 1.5 13S6.2 23.5 12 23.5 22.5 18.8 22.5 13 17.8 2.5 12 2.5zM5.4 7.1c.4-.7 1.1-1.3 1.8-1.6l2.3 3.9c-.3.1-.5.2-.8.4-.5.3-1 .8-1.3 1.3L5.4 9c-.2-.6-.2-1.3 0-1.9zM6.6 17c-.8-1.4-.9-3.1-.2-4.6l2 2c.1.4.3.8.6 1.2.3.4.7.7 1.2.9l-1 1.7c-1-.3-1.9-.9-2.6-1.6zm10.8 0c-.7.7-1.6 1.2-2.6 1.6l-1-1.7c.5-.2.9-.5 1.2-.9s.5-.8.6-1.2l2 2c.7 1.5.6 3.2-.2 4.6zm1.2-8l-2 2c-.3-.5-.7-1-1.3-1.3-.2-.2-.5-.3-.8-.4l2.3-3.9c.7.3 1.4.9 1.8 1.6.2.6.2 1.3 0 1.9z"/>
                                    </svg>
                                </div>
                                <h5 class="card-title fw-bold mb-3">NuGet Package</h5>
                                <p class="card-text text-muted mb-4">
                                    Install as a global .NET tool via NuGet package manager
                                </p>
                                <a href="https://www.nuget.org/packages/SchemaMagic" 
                                   target="_blank" 
                                   rel="noopener noreferrer"
                                   class="btn btn-primary btn-lg w-100">
                                    <i class="bi bi-box-seam me-2"></i>
                                    View on NuGet
                                </a>
                                <div class="mt-3">
                                    <small class="text-muted">
                                        <code>dotnet tool install -g SchemaMagic</code>
                                    </small>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="text-center mt-4">
                    <a href="/cli-tool" class="btn btn-outline-primary btn-lg">
                        <i class="bi bi-book me-2"></i>
                        View Complete CLI Documentation
                    </a>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Features Section -->
<section class="py-5 bg-white">
    <div class="container">
        <div class="text-center mb-5">
            <h2 class="display-5 fw-bold mb-3">
                <i class="bi bi-rocket-takeoff"></i> Key Features
            </h2>
            <p class="lead text-muted">Everything you need for database schema visualization</p>
        </div>

        <div class="row g-4">
            <div class="col-md-6 col-lg-4">
                <div class="card h-100 border-0 shadow-sm">
                    <div class="card-body text-center">
                        <div class="feature-icon mb-4">
                            <i class="bi bi-github"></i>
                        </div>
                        <h5 class="card-title fw-bold mb-3">GitHub Integration</h5>
                        <p class="card-text text-muted">
                            Connect to any public GitHub repository and automatically discover DbContext files.
                        </p>
                    </div>
                </div>
            </div>

            <div class="col-md-6 col-lg-4">
                <div class="card h-100 border-0 shadow-sm">
                    <div class="card-body text-center">
                        <div class="feature-icon mb-4">
                            <i class="bi bi-diagram-2"></i>
                        </div>
                        <h5 class="card-title fw-bold mb-3">Interactive Diagrams</h5>
                        <p class="card-text text-muted">
                            Drag tables, zoom, pan, and explore relationships in beautiful SVG-rendered schemas.
                        </p>
                    </div>
                </div>
            </div>

            <div class="col-md-6 col-lg-4">
                <div class="card h-100 border-0 shadow-sm">
                    <div class="card-body text-center">
                        <div class="feature-icon mb-4">
                            <i class="bi bi-lightning-charge"></i>
                        </div>
                        <h5 class="card-title fw-bold mb-3">Real-time Analysis</h5>
                        <p class="card-text text-muted">
                            Instant schema generation using Roslyn parsing - no compilation required.
                        </p>
                    </div>
                </div>
            </div>

            <div class="col-md-6 col-lg-4">
                <div class="card h-100 border-0 shadow-sm">
                    <div class="card-body text-center">
                        <div class="feature-icon mb-4">
                            <i class="bi bi-palette"></i>
                        </div>
                        <h5 class="card-title fw-bold mb-3">Dark Mode Support</h5>
                        <p class="card-text text-muted">
                            Automatic dark mode based on your system preference for comfortable viewing.
                        </p>
                    </div>
                </div>
            </div>

            <div class="col-md-6 col-lg-4">
                <div class="card h-100 border-0 shadow-sm">
                    <div class="card-body text-center">
                        <div class="feature-icon mb-4">
                            <i class="bi bi-phone"></i>
                        </div>
                        <h5 class="card-title fw-bold mb-3">Mobile Friendly</h5>
                        <p class="card-text text-muted">
                            Works seamlessly on desktop, tablet, and mobile devices with responsive design.
                        </p>
                    </div>
                </div>
            </div>

            <div class="col-md-6 col-lg-4">
                <div class="card h-100 border-0 shadow-sm">
                    <div class="card-body text-center">
                        <div class="feature-icon mb-4">
                            <i class="bi bi-wifi-off"></i>
                        </div>
                        <h5 class="card-title fw-bold mb-3">Works Offline</h5>
                        <p class="card-text text-muted">
                            Generated schemas are standalone HTML files that work offline with all features.
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

@code {
    private const string DemoRepositoryUrl = "https://github.com/panoramicdata/SchemaMagic";
    
    private string repositoryUrl = "";
    private string selectedDbContextPath = "";
    private string accessToken = "";
    private string errorMessage = "";
    private bool isLoading = false;
    private bool isAnalyzing = false;
    private bool isValidatingToken = false;
    private bool? tokenValidationResult = null;
    private List<DbContextInfo> dbContextFiles = new();
    private SchemaAnalysisResult? analysisResult;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Set focus on the repository input field
            await JSRuntime.InvokeVoidAsync("setRepositoryInputFocus");
        }
    }

    private void LoadDemoRepository()
    {
        repositoryUrl = DemoRepositoryUrl;
        errorMessage = "";
        dbContextFiles.Clear();
        analysisResult = null;
        selectedDbContextPath = "";
        StateHasChanged();
        
        // Automatically trigger discovery after setting the URL
        _ = Task.Run(async () =>
        {
            // Small delay to ensure UI has updated
            await Task.Delay(100);
            await InvokeAsync(async () =>
            {
                await DiscoverDbContextsAsync();
            });
        });
    }

    private async Task ValidateTokenAsync()
    {
        if (string.IsNullOrWhiteSpace(accessToken))
            return;

        isValidatingToken = true;
        StateHasChanged();

        try
        {
            tokenValidationResult = await GitHubService.ValidateAccessTokenAsync(accessToken);
        }
        catch (Exception)
        {
            tokenValidationResult = false;
        }
        finally
        {
            isValidatingToken = false;
            StateHasChanged();
        }
    }

    private async Task DiscoverDbContextsAsync()
    {
        if (string.IsNullOrWhiteSpace(repositoryUrl))
            return;

        isLoading = true;
        errorMessage = "";
        dbContextFiles.Clear();
        analysisResult = null;
        selectedDbContextPath = "";
        StateHasChanged();

        try
        {
            // Pass the access token if provided
            var token = string.IsNullOrWhiteSpace(accessToken) ? null : accessToken;
            dbContextFiles = await GitHubService.FindDbContextFilesAsync(repositoryUrl, token);

            if (!dbContextFiles.Any())
            {
                errorMessage = "No DbContext files found in the repository. Make sure the repository contains Entity Framework Core DbContext classes.";
            }
            else if (dbContextFiles.Count == 1)
            {
                // Automatically select and analyze the single DbContext file
                selectedDbContextPath = dbContextFiles[0].FilePath;
                StateHasChanged();
                
                // Automatically trigger analysis
                await AnalyzeSchemaAsync();
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task AnalyzeSchemaAsync()
    {
        if (string.IsNullOrEmpty(selectedDbContextPath))
            return;

        isAnalyzing = true;
        errorMessage = "";
        StateHasChanged();

        try
        {
            var selectedFile = dbContextFiles.FirstOrDefault(f => f.FilePath == selectedDbContextPath);
            if (selectedFile != null)
            {
                // Generate deterministic GUID based on repository URL and DbContext file path
                var documentGuid = GenerateGuidFromRepoAndFile(repositoryUrl, selectedFile.FilePath);
                
                Console.WriteLine($"?? Generated GUID for {repositoryUrl}/{selectedFile.FilePath}: {documentGuid}");

                analysisResult = await SchemaAnalysisService.AnalyzeDbContextAsync(
                    selectedFile.Content, selectedFile.FileName, documentGuid);

                if (!analysisResult.Success)
                {
                    errorMessage = analysisResult.ErrorMessage ?? "Analysis failed. The file may not contain valid DbContext entities.";
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Analysis error: {ex.Message}";
        }
        finally
        {
            isAnalyzing = false;
            StateHasChanged();
        }
    }

    private static string GenerateGuidFromRepoAndFile(string repoUrl, string filePath)
    {
        // Combine repository URL and file path for uniqueness
        var combined = $"{repoUrl.Trim().ToLowerInvariant()}|{filePath.Trim().ToLowerInvariant()}";
        
        // Generate SHA256 hash
        using var sha256 = SHA256.Create();
        var hashBytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(combined));
        
        // Take first 16 bytes and convert to GUID format
        var guidBytes = new byte[16];
        Array.Copy(hashBytes, guidBytes, 16);
        
        // Set version (4) and variant bits for a valid GUID
        guidBytes[7] = (byte)((guidBytes[7] & 0x0F) | 0x40); // Version 4
        guidBytes[8] = (byte)((guidBytes[8] & 0x3F) | 0x80); // Variant is 10
        
        var guid = new Guid(guidBytes);
        return guid.ToString();
    }

    private async Task ViewSchemaAsync()
    {
        if (analysisResult?.Success == true)
        {
            await JSRuntime.InvokeVoidAsync("openSchemaInNewTab", analysisResult.HtmlContent);
        }
    }

    private async Task DownloadSchemaAsync()
    {
        if (analysisResult?.Success == true)
        {
            var fileName = $"Schema-{DateTime.Now:yyyyMMdd-HHmmss}.html";
            await JSRuntime.InvokeVoidAsync("downloadFile", fileName, analysisResult.HtmlContent, "text/html");
        }
    }
}